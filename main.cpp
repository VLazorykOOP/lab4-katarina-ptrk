#include "busschedule.h"
#include "matrixushort.h"
#include "vectorushort.h"
#include <iostream>

using namespace std;

int main() {
  cout << "---TASK 1---" << endl;
  VectorUShort Avec(5, 2);
  VectorUShort Bvec(3);
  VectorUShort Cvec;
  cout << "A: " << Avec << endl;
  cout << "B: " << Bvec << endl;
  cout << "C: " << Cvec << endl;
  cout << "Objects: " << Avec.count << endl;
  VectorUShort Dvec(Avec);
  cout << "D: " << Dvec << endl;
  cout << "Objects: " << Avec.count << endl;
  Dvec++;
  cout << "D: " << Dvec << endl;
  Dvec--;
  cout << "D: " << Dvec << endl;
  cout << "!C: " << !Cvec << endl;
  cout << "~A: " << ~Avec << endl;
  cout << "~A: " << ~Avec << endl;
  cout << "A: " << Avec << endl;
  cout << "-A: " << -Avec << endl;
  cout << "-A: " << -Avec << endl;
  cout << "A+D: " << Avec + Dvec << endl;
  cout << "A-D: " << Avec - Dvec << endl;
  cout << "A+1: " << Avec + 1 << endl;
  cout << "A-1: " << Avec - 1 << endl;
  cout << "A*D: " << Avec * Dvec << endl;
  cout << "A*2: " << Avec * 2 << endl;
  cout << "A/D: " << Avec / Dvec << endl;
  cout << "A/2: " << Avec / 2 << endl;
  cout << "A%2: " << Avec % 2 << endl;
  cout << "A|D: " << (Avec | Dvec) << endl;
  cout << "A|3: " << (Avec | 3) << endl;
  cout << "A^D: " << (Avec ^ Dvec) << endl;
  cout << "A^3: " << (Avec ^ 3) << endl;
  Avec += Dvec;
  cout << "A+=D: " << Avec << endl;
  Avec -= Dvec;
  cout << "A-=D: " << Avec << endl;
  Avec += 3;
  cout << "A+=3: " << Avec << endl;
  Avec -= 3;
  cout << "A-=3: " << Avec << endl;
  Avec *= Dvec;
  cout << "A*=D: " << Avec << endl;
  Avec /= Dvec;
  cout << "A/=D: " << Avec << endl;
  Avec *= 3;
  cout << "A*=3: " << Avec << endl;
  Avec /= 3;
  cout << "A/=3: " << Avec << endl;
  VectorUShort Lvec(Avec);
  cout << "L: " << Lvec << endl;
  Lvec %= 2;
  cout << "L%=2: " << Lvec << endl;
  Lvec |= 20;
  cout << "L|=20: " << Lvec << endl;
  Lvec ^= 10;
  cout << "L^10: " << Lvec << endl;
  VectorUShort copyAvec(Avec);
  cout << "Objects: " << Avec.count << endl;
  cout << "A==copyA: " << (Avec == copyAvec) << endl;
  cout << "A!=copyA: " << (Avec != copyAvec) << endl;
  cout << "A[2]: " << Avec[2] << endl;
  VectorUShort Zvec(3, 4);
  VectorUShort Xvec(3, 5);
  cout << "Z: " << Zvec << endl;
  cout << "X: " << Xvec << endl;
  cout << "Z > X: " << (Zvec > Xvec) << endl;
  cout << "Z < X: " << (Zvec < Xvec) << endl;
  cout << "Z >= X: " << (Zvec >= Xvec) << endl;
  cout << "Z <= X: " << (Zvec <= Xvec) << endl;
  cout << endl << "---TASK 2---" << endl;
  BusSchedule schedule;
  schedule.add(123, "10:00");
  schedule.add(456, "13:30");
  schedule.add(789, "16:45");

  std::cout << schedule << std::endl;

  std::cout << "Flight #123: " << schedule[456] << std::endl;
  std::cout << "Flight #999: " << schedule[999] << std::endl;
  std::cout << "Error code: " << schedule.getErrorCode() << std::endl;

  schedule.resetErrorCode();

  std::cout << "Flight at 10:00: " << schedule["10:00"] << std::endl;

  cout << endl << "---TASL 3---" << endl;
  MatrixUShort Amat;
  MatrixUShort Bmat(2);
  MatrixUShort Cmat(3, 3);
  MatrixUShort Dmat(3, 3, 3);
  MatrixUShort Ccopymat(Cmat);
  cout << "A:\n" << Amat << endl;
  cout << "B:\n" << Bmat << endl;
  cout << "C:\n" << Cmat << endl;
  cout << "D:\n" << Dmat << endl;
  cout << "Ccopy:\n" << Ccopymat << endl;
  cout << "Matrix count: " << Amat.num_matrix << endl;
  //  cout << "Enter C:\n";
  //  cin >> C;
  //  cout << "Entered C: \n" << endl;
  //  cout << C << endl;
  //  C++;
  //  cout << "C++:\n" << C << endl;
  //  C--;
  //  cout << "C--:\n" << C << endl;
  //  cout << !C << endl;
  cout << "~D:\n" << Dmat << endl;
  cout << "-D:\n" << Dmat << endl;
  MatrixUShort Fmat = Dmat;
  cout << "F=D:\n" << Fmat << endl;
  cout << "B+C:\n" << Bmat + Cmat << endl;
  cout << "B-C:\n" << Bmat - Cmat << endl;
  MatrixUShort x1mat(3, 3, 1);
  MatrixUShort x2mat = x1mat;
  cout << "x1=x2=\n" << x1mat << endl;
  cout << "x1*x2:\n" << x1mat * x2mat << endl;
  cout << "x1*5:\n" << x1mat * 5 << endl;
  VectorUShort vec1(3, 1);
  cout << "Vec1:\n" << vec1 << endl;
  cout << "x1*vec1:\n" << x1mat * vec1 << endl;
  MatrixUShort x3mat(2, 2, 10);
  cout << "X3:\n" << x3mat << endl;
  x3mat += x3mat;
  cout << "x3 += x3:\n" << x3mat << endl;
  x3mat -= x3mat / 2;
  cout << "x3 -= x3/2:\n" << x3mat << endl;

  cout << "x3 / 5:\n" << x3mat / 5 << endl;
  cout << "x3 % 5:\n" << x3mat % 3 << endl;
  cout << "x3 | x3:\n" << (x3mat | x3mat) << endl;
  cout << "x3 ^ x3:\n" << (x3mat ^ x3mat) << endl;
  cout << "x3 ^ 5:\n" << (x3mat ^ 5) << endl;
  cout << "x3 & x3:\n" << (x3mat & x3mat) << endl;
  cout << "x3 & 5:\n" << (x3mat & 5) << endl;
  x3mat <<= (int)2;
  cout << "X3 <<=2 (*4):\n" << x3mat;
  x3mat >>= (int)2;
  cout << "x3 >>2 (/4):\n" << x3mat;
  MatrixUShort ccmat(3, 3, 5);
  MatrixUShort cdmat(3, 3, 5);
  cout << "cc!=cd(they are equal.):\n" << (ccmat == cdmat) << endl;
  MatrixUShort camat(3, 3, 5);
  MatrixUShort cbmat(3, 3, 4);
  cout << "ca!=cb(they are NOT equal.):\n" << (camat != cbmat) << endl;
  cout << "ca>cb:\n" << (camat > cbmat) << endl;
  cout << "ca<cb:\n" << (camat < cbmat) << endl;
  cout << "c[1][1]: " << camat[1][1] << endl;
  return 0;
}
